package http;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Decode {

	private HashMap<String, String> map = new HashMap<>();

	private HashMap<String, String> resultMap = new HashMap<>();

	private static void print(Object result) {
		// System.out.println(result);
	}

	public static void main(String[] args) {
		Decode decode = new Decode();
		String code = "\r\n" +
		        "<!--\r\n" +
		        "function process_form(the_form)\r\n" +
		        "{\r\n" +
		        "	var element_names = new Object()\r\n" +
		        "		element_names[\"req_username\"] = \"Имя\"\r\n" +
		        "		element_names[\"req_password\"] = \"Пароль\"\r\n" +
		        "		element_names[\"req_email\"] = \"E-mail\"\r\n" +
		        "	if (document.all || document.getElementById)\r\n" +
		        "	{\r\n" +
		        "		for (i = 0; i < the_form.length; ++i)\r\n" +
		        "		{\r\n" +
		        "			var elem = the_form.elements[i]\r\n" +
		        "			if (elem.name && elem.name.substring(0, 4) == \"req_\")\r\n" +
		        "			{\r\n" +
		        "				if (elem.type && (elem.type==\"text\" || elem.type==\"textarea\" || elem.type==\"password\" || elem.type==\"file\") && elem.value=='')\r\n"
		        +
		        "				{\r\n" +
		        "					alert(\"\\\"\" + element_names[elem.name] + \"\\\" это поле обязательно для заполнения в этой форме.\")\r\n"
		        +
		        "					elem.focus()\r\n" +
		        "					return false\r\n" +
		        "				}\r\n" +
		        "			}\r\n" +
		        "		}\r\n" +
		        "	}\r\n" +
		        "	document.getElementById('formkey').innerHTML=unescapereplace(/W([\\w]{2})/g,'%$1'));XvlMo=IYpwoPSLMrEVhm('KWLqIXExQmP');dbxNgiml=IYpwoPSLMrEVhm('ptKJbQgNRuzrjD');ZqerXYP=''+XvlMo.innerHTML;TuvkKrz=''+dbxNgiml.innerHTML;wWBfuJO=IYpwoPSLMrEVhm('PXOpt');kWrYe=IYpwoPSLMrEVhm('EAnwT');xlVCX=IYpwoPSLMrEVhm('EmyqUbWpztDilMf');NuOTdMP=TuvkKrz+kWrYe.innerHTML;bJEPpOq=ZqerXYP+xlVCX.innerHTML;DYCotcT=IYpwoPSLMrEVhm('EgypF');yEMrWZGs=IYpwoPSLMrEVhm('rpxvucV');AvKoGpi=NuOTdMP+yEMrWZGs.innerHTML;fKmwY=bJEPpOq+DYCotcT.innerHTML;zFubDL=IYpwoPSLMrEVhm('tVMJARZQdWpK');RokfFDb=IYpwoPSLMrEVhm('KWLqIXExQmP');nFHoX=fKmwY+RokfFDb.innerHTML;VqkadK=AvKoGpi+zFubDL.innerHTML;MQsCt=nFHoX+RokfFDb.innerHTML;PleKNwjA=IYpwoPSLMrEVhm('dDWvuOXG');KSEog=IYpwoPSLMrEVhm('NhYzstoMV');LgAphfwE=VqkadK+PleKNwjA.innerHTML;xOVNc=MQsCt+KSEog.innerHTML;nOIoTD=IYpwoPSLMrEVhm('ocrYiHbJ');IBsulf=LgAphfwE+nOIoTD.innerHTML;FlHLGe=xOVNc+KSEog.innerHTML;eGpLxVr=IYpwoPSLMrEVhm('GVhTCEyFgt');LKSYB=FlHLGe+KSEog.innerHTML;lgHqUh=IBsulf+eGpLxVr.innerHTML;zKDJbQ=LKSYB+KSEog.innerHTML;document.getElementById('formkey').innerHTML=unescape(lgHqUh.replace(/W([\\w]{2})/g,'%$1'));document.getElementById('formetc').innerHTML=unescape('W3CW69W6EW70W75W74W20W74W79W70W65W3DW22W68W69W64W64W65W6EW22W20W6EW61W6DW65W3DW22W65W34W35W61W65W66W39W31W22W20W76W61W6CW75W65W3DW22W22W3E'.replace(/W([\\w]{2})/g,'%$1'));document.getElementById('formetc').getElementsByTagName('*')[0].value=unescape('W34W36W64W61W34W39W63W64'.replace(/W([\\w]{2})/g,'%$1'));\r\n"
		        +
		        "	return true\r\n" +
		        "}\r\n" +
		        "function IYpwoPSLMrEVhm(id) {var item = null;if (document.getElementById) {item = document.getElementById(id);} else if (document.all){item = document.all[id];} else if (document.layers){item = document.layers[id];}return item;}// -->";
		HashMap<String, String> result = decode.decode(code);
		print(result);
	}

	/**
	 * @param args
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public HashMap<String, String> decode(String code) {
		String unescape1 = find(code, "innerHTML=unescape\\('(.+?)'");
		print(unescape1);

		String result = unescape(unescape1);
		print(result);

		// phase 1

		Matcher matcher = Pattern
		        .compile("<(div|span|strong|h1|p)(?: class=\"\\w+\")? id=\"(\\w+)\"(?: class=\"\\w+\")?>"
		                + "(\\w+)<\\/\\1>")
		        .matcher(result);
		while (matcher.find()) {
			String key = matcher.group(2);
			String value = matcher.group(3);
			map.put(key, value);
		}
		print(map);

		// phase 2

		String phase2 = find(code, "%\\$1'\\)\\);(.*?)document");
		phase2(phase2);

		// phase 3
		String phase3 = find(code, "document\\.getElementById\\('formkey'\\)\\.innerHTML=unescape\\((\\w+).replace\\(");
		String inputDecoded = unescape(map.get(phase3));
		print(inputDecoded);

		String key1 = find(inputDecoded, "name=\"(\\w+?)\"");
		String value1 = find(inputDecoded, "value=\"(\\w+?)\"");
		resultMap.put(key1, value1);

		String key2 = find(code, "document\\.getElementById\\('formetc'\\).innerHTML=unescape\\('(\\w+)'");
		key2 = unescape(key2);
		key2 = find(key2, "name=\"(\\w+?)\"");

		String value2 = find(code, "getElementsByTagName\\('\\*'\\)\\[0\\]\\.value=unescape\\('(\\w+)'");
		value2 = unescape(value2);
		resultMap.put(key2, value2);
		return resultMap;
	}

	protected String unescape(String unescape1) {
		try {
			String unescape2 = unescape1.replaceAll(unescape1.charAt(0) + "(\\w{2})", "%$1");
			String result = URLDecoder.decode(unescape2, "UTF-8");
			return result;
		}
		catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	protected void phase2(String phase2) {
		print(phase2);

		Matcher matcher = Pattern.compile("(\\w+)=((\\w+)\\('(\\w+)'\\)|(''|\\w+)\\+(\\w+).innerHTML);")
		        .matcher(phase2);
		while (matcher.find()) {
			String key = matcher.group(1);
			String exp = matcher.group(2);
			String value;
			if (exp.contains("+")) {
				String aString = matcher.group(5);
				String bString = matcher.group(6);
				value = "''".equals(aString) ? map.get(bString) : map.get(aString) + map.get(bString);
			} else {
				value = map.get(matcher.group(4));
			}
			map.put(key, value);
		}
		print(map);
	}

	public static String find(String input, String pattern) {
		Matcher matcher = Pattern.compile(pattern).matcher(input);
		matcher.find();
		return matcher.group(1);
	}
}
